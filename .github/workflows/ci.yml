name: Build and Deploy

on:
  workflow_dispatch:
  push:
    branches:
      - dev
      - main
  pull_request:
    branches:
      - main

env:
  VERSION: 0.0.${{ github.run_number }}

jobs:
  build:
    name: Build Project for ${{ matrix.targetPlatform }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        projectPath:
          - .
        targetPlatform:
          - WebGL
          - StandaloneWindows64
          - StandaloneOSX
          - StandaloneLinux64
        unityVersion:
          - 2022.3.2f1
    steps:
      - name: Checkout repository
        id: checkout-repo
        uses: actions/checkout@v3
        with:
          submodules: true

      - name: Install Unity Explorer dependency
        id: install-unity-explorer
        run: |
          curl -OL https://github.com/sinai-dev/UnityExplorer/releases/download/4.9.0/UnityExplorer.Editor.zip
          unzip UnityExplorer.Editor.zip -d UnityExplorer.Editor
          rm UnityExplorer.Editor.zip

      - name: Cache library
        id: cache-library
        uses: actions/cache@v3
        with:
          path: Library
          key: Library-${{ matrix.projectPath }}-${{ matrix.targetPlatform }}-${{ hashFiles(matrix.projectPath) }}
          restore-keys: |
            Library-${{ matrix.projectPath }}-${{ matrix.targetPlatform }}-
            Library-${{ matrix.projectPath }}-
            Library-

      - name: Run tests
        id: run-tests
        uses: game-ci/unity-test-runner@v2
        env:
          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
        with:
          githubToken: ${{ secrets.GITHUB_TOKEN }}

      - name: Free Disk Space
        run: |
          sudo swapoff -a
          sudo rm -f /swapfile
          sudo apt clean
          docker rmi $(docker image ls -aq)
          df -h

      - name: Build project
        id: build-project
        uses: game-ci/unity-builder@v2
        env:
          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
        with:
          allowDirtyBuild: true
          buildName: ${{ secrets.ITCH_GAME }}
          targetPlatform: ${{ matrix.targetPlatform }}
          unityVersion: ${{ matrix.unityVersion }}

      - name: Zip builds
        id: zip-builds
        run: |
          cd build/${{ matrix.targetPlatform }}
          zip -r ../../${{ matrix.targetPlatform }}.zip *

      - name: Upload artifacts
        id: upload-builds
        uses: actions/upload-artifact@v3
        with:
          name: Builds
          path: ./*.zip

  create-release:
    needs: build
    runs-on: ubuntu-latest
    outputs:
      UPLOAD-URL: ${{ steps.create-release.outputs.upload_url }}
    steps:
      - name: Create Release
        id: create-release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.VERSION }}
          release_name: Release v${{ env.VERSION }}
          draft: false
          prerelease: false
          
  upload-assets:
    needs: create-release
    runs-on: ubuntu-latest
    strategy:
      matrix:
        os:
          - { platform: StandaloneWindows64, name: Windows }
          - { platform: StandaloneOSX, name: macOS }
          - { platform: StandaloneLinux64, name: Linux }
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v3
        with:
          name: Builds
          path: ./
      - name: Upload release asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.UPLOAD-URL }}
          asset_path: ${{ matrix.os.platform }}.zip
          asset_name: ${{ secrets.ITCH_GAME }}_${{ matrix.os.name }}.zip
          asset_content_type: application/zip
  deploy-itch:
    needs: build
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        os:
          - { platform: StandaloneWindows64, channel: windows }
          - { platform: StandaloneOSX, channel: macos }
          - { platform: StandaloneLinux64, channel: linux }
          - { platform: WebGL, channel: html5 }
    steps:
      - name: Checkout
        id: checkout-repo
        uses: actions/checkout@v3

      - name: Download artifact
        id: download-builds
        uses: actions/download-artifact@v3
        with:
          name: Builds
          path: ./

      - name: Deploy to Itch.io
        id: deploy-itch
        uses: josephbmanley/butler-publish-itchio-action@master
        env:
          BUTLER_CREDENTIALS: ${{ secrets.BUTLER_CREDENTIALS }}
          CHANNEL: ${{ matrix.os.channel }}
          ITCH_GAME: ${{ secrets.ITCH_GAME }}
          ITCH_USER: ${{ secrets.ITCH_USER }}
          PACKAGE: ${{ matrix.os.platform }}.zip

  deploy-pages:
    needs: build
    permissions: write-all
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deploy.outputs.page_url }}
    steps:
      - name: Checkout
        id: checkout-repo
        uses: actions/checkout@v3

      - name: Download artifact
        id: download-builds
        uses: actions/download-artifact@v3
        with:
          name: Builds
          path: Builds

      - name: Unzip WebGL build
        id: unzip-webgl
        run: |
          cd Builds
          unzip WebGL.zip
          rm WebGL.zip
         
      - name: Upload Pages artifact
        id: upload-pages-artifact
        uses: JamesIves/github-pages-deploy-action@v4
        with:
          folder: Builds/${{ secrets.ITCH_GAME }}
